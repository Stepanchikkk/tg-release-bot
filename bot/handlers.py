from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.storage import get_all_apps, get_app, save_app, delete_app
from bot.models import App
from bot.config import ADMIN_ID, GITHUB_TOKEN
from bot.services import get_latest_release, get_release_assets, check_releases
from bot.utils import validate_repo, validate_key
import logging
import aiohttp
import io

logger = logging.getLogger(__name__)

router = Router()

class AddAppStates(StatesGroup):
    key = State()
    title = State()
    link = State()
    repo = State()
    asset_filters = State()
    select_assets = State()

def get_main_menu(apps):
    buttons = [[InlineKeyboardButton(text=app.title, callback_data=f"app:{app.key}")] for app in apps]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_app_menu(app: App, is_subscribed: bool, is_admin: bool = False):
    buttons = [
        [InlineKeyboardButton(text="üì¶ –°–∫–∞—á–∞—Ç—å", callback_data=f"download:{app.key}")],
        [InlineKeyboardButton(text="üåê –°—Å—ã–ª–∫–∞", callback_data=f"link:{app.key}")],
        [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" if not is_subscribed else "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"subscribe:{app.key}")]
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{app.key}")])
        buttons.append([InlineKeyboardButton(text="üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", callback_data=f"setrepo:{app.key}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_asset_selection_menu(assets: list, selected: list):
    buttons = [
        [InlineKeyboardButton(
            text=f"{'‚úÖ ' if assets[i] in selected else ''}{assets[i]}",
            callback_data=f"asset:{i}"
        )] for i in range(len(assets))
    ]
    buttons.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="asset_done")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(CommandStart())
async def start(message: Message):
    try:
        apps = get_all_apps()
        welcome_text = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ GitHub.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/menu - –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
        )
        if not apps:
            await message.answer(f"{welcome_text}\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
            return
        await message.answer(f"{welcome_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=get_main_menu(apps))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Command("menu"))
async def menu(message: Message):
    try:
        apps = get_all_apps()
        if not apps:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
            return
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=get_main_menu(apps))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ menu: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Command("help"))
async def help_command(message: Message):
    try:
        help_text = (
            "üìã **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**:\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        )
        await message.answer(help_text, parse_mode="Markdown")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ help: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Command("adminhelp"))
async def admin_help_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    try:
        help_text = (
            "üîê **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**:\n"
            "/addapp - –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
            "/removeapp <key> - –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É\n"
            "/setrepo <key> <owner/repo> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
            "/apps - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
            "/checkupdates - –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
        )
        await message.answer(help_text, parse_mode="Markdown")
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ adminhelp: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Command("addapp"))
async def add_app(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'lsposed'):")
    await state.set_state(AddAppStates.key)
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

@router.message(AddAppStates.key)
async def process_key(message: Message, state: FSMContext):
    key = message.text.strip()
    if not validate_key(key):
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–ª—é—á. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.")
        return
    if get_app(key):
        await message.answer("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    await state.update_data(key=key)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'LSPosed'):")
    await state.set_state(AddAppStates.title)
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–∫–∞–∑–∞–ª –∫–ª—é—á: {key}")

@router.message(AddAppStates.title)
async def process_title(message: Message, state: FSMContext):
    title = message.text.strip()
    if not title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    await state.update_data(title=title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'https://github.com/LSPosed/LSPosed'):")
    await state.set_state(AddAppStates.link)
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–∫–∞–∑–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ: {title}")

@router.message(AddAppStates.link)
async def process_link(message: Message, state: FSMContext):
    link = message.text.strip()
    if not link.startswith("http"):
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Å—ã–ª–∫–∞. –î–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        return
    await state.update_data(link=link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (—Ñ–æ—Ä–º–∞—Ç: owner/repo, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'LSPosed/LSPosed'):")
    await state.set_state(AddAppStates.repo)
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–∫–∞–∑–∞–ª —Å—Å—ã–ª–∫—É: {link}")

@router.message(AddAppStates.repo)
async def process_repo(message: Message, state: FSMContext):
    repo = message.text.strip()
    if not validate_repo(repo):
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 'owner/repo' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'LSPosed/LSPosed').")
        return
    release = await get_latest_release(repo)
    if not release:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    await state.update_data(repo=repo)
    assets = await get_release_assets(repo)
    if not assets:
        await message.answer("–í –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤—Ä—É—á–Ω—É—é (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, '*.apk,*.zip'):")
        await state.set_state(AddAppStates.asset_filters)
    else:
        await state.update_data(available_assets=assets, selected_asset_indices=[])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=get_asset_selection_menu(assets, []))
        await state.set_state(AddAppStates.select_assets)
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–∫–∞–∑–∞–ª —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo}")

@router.callback_query(AddAppStates.select_assets, F.data.startswith("asset:"))
async def select_asset(callback: CallbackQuery, state: FSMContext):
    try:
        asset_index = int(callback.data.split(":", 1)[1])
        data = await state.get_data()
        assets = data.get("available_assets", [])
        selected_indices = data.get("selected_asset_indices", [])
        if asset_index in selected_indices:
            selected_indices.remove(asset_index)
        else:
            selected_indices.append(asset_index)
        await state.update_data(selected_asset_indices=selected_indices)
        selected_assets = [assets[i] for i in selected_indices]
        await callback.message.edit_reply_markup(
            reply_markup=get_asset_selection_menu(assets, selected_assets)
        )
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—ã–±—Ä–∞–ª/—Å–Ω—è–ª –∞–∫—Ç–∏–≤ —Å –∏–Ω–¥–µ–∫—Å–æ–º: {asset_index}")
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫—Ç–∏–≤–∞: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞.")

@router.callback_query(AddAppStates.select_assets, F.data == "asset_done")
async def finish_assets(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    assets = data.get("available_assets", [])
    selected_indices = data.get("selected_asset_indices", [])
    if not selected_indices:
        await callback.message.edit_text("–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤—Ä—É—á–Ω—É—é (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, '*.apk,*.zip'):")
        await state.set_state(AddAppStates.asset_filters)
        return
    selected_assets = [assets[i] for i in selected_indices]
    await state.update_data(asset_filters=selected_assets)
    app = App(
        key=data["key"],
        title=data["title"],
        link=data["link"],
        repo=data["repo"],
        asset_filters=selected_assets,
        subscribers_users=[],
        subscribers_chats=[],
        latest_release=None
    )
    save_app(app)
    await callback.message.edit_text(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    apps = get_all_apps()
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(apps))
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app.key}")

@router.message(AddAppStates.asset_filters)
async def process_filters(message: Message, state: FSMContext):
    filters = [f.strip() for f in message.text.split(",") if f.strip()]
    if not filters:
        await message.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä.")
        return
    data = await state.get_data()
    app = App(
        key=data["key"],
        title=data["title"],
        link=data["link"],
        repo=data["repo"],
        asset_filters=filters,
        subscribers_users=[],
        subscribers_chats=[],
        latest_release=None
    )
    save_app(app)
    await message.answer(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    apps = get_all_apps()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(apps))
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app.key}")

@router.message(Command("removeapp"))
async def remove_app(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeapp <–∫–ª—é—á>")
        return
    key = args[1].strip()
    if get_app(key):
        delete_app(key)
        await message.answer(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {key} —É–¥–∞–ª–µ–Ω–æ!")
        apps = get_all_apps()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(apps))
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {key}")
    else:
        await message.answer("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@router.message(Command("setrepo"))
async def set_repo(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.")
        return
    args = message.text.split(maxsplit=2)
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrepo <–∫–ª—é—á> <owner/repo>")
        return
    key, repo = args[1].strip(), args[2].strip()
    if not validate_repo(repo):
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'owner/repo' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'LSPosed/LSPosed').")
        return
    app = get_app(key)
    if not app:
        await message.answer("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    release = await get_latest_release(repo)
    if not release:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    app.repo = repo
    save_app(app)
    await message.answer(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è {key} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {repo}!")
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è {key}: {repo}")

@router.message(Command("apps"))
async def list_apps(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
        return
    apps = get_all_apps()
    if not apps:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
        return
    text = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n" + "\n".join(
        f"{app.title} ({app.key})\n  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {app.repo}\n  –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {len(app.subscribers_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(app.subscribers_chats)} —á–∞—Ç–æ–≤\n  –§–∏–ª—å—Ç—Ä—ã: {', '.join(app.asset_filters)}"
        for app in apps
    )
    await message.answer(text)
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")

@router.message(Command("checkupdates"))
async def check_updates(message: Message, bot: Bot):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    await check_releases(bot)
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")

@router.callback_query(F.data.startswith("app:"))
async def app_selected(callback: CallbackQuery):
    try:
        key = callback.data.split(":", 1)[1]
        app = get_app(key)
        if not app:
            await callback.message.edit_text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        is_subscribed = (
            callback.from_user.id in app.subscribers_users
            if callback.message.chat.type == "private"
            else callback.message.chat.id in app.subscribers_chats
        )
        is_admin = callback.from_user.id == ADMIN_ID
        await callback.message.edit_text(f"{app.title}", reply_markup=get_app_menu(app, is_subscribed, is_admin))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {key}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data == "back")
async def go_back(callback: CallbackQuery):
    try:
        apps = get_all_apps()
        if not apps:
            await callback.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
            return
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(apps))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data.startswith("download:"))
async def download_app(callback: CallbackQuery, bot: Bot):
    try:
        key = callback.data.split(":", 1)[1]
        app = get_app(key)
        if not app:
            await callback.message.edit_text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        release = await get_latest_release(app.repo)
        if not release:
            await callback.message.edit_text("–†–µ–ª–∏–∑—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        is_subscribed = (
            callback.from_user.id in app.subscribers_users
            if callback.message.chat.type == "private"
            else callback.message.chat.id in app.subscribers_chats
        )
        is_admin = callback.from_user.id == ADMIN_ID
        sent = False
        headers = {"Authorization": f"token {GITHUB_TOKEN}"} if GITHUB_TOKEN else {}
        headers["Accept"] = "application/octet-stream"
        async with aiohttp.ClientSession() as session:
            for asset in release['assets']:
                if any(asset['name'].endswith(f.strip()) for f in app.asset_filters):
                    asset_url = asset['url']
                    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {asset_url} (–∏–º—è: {asset['name']})")
                    try:
                        async with session.get(asset_url, headers=headers) as resp:
                            if resp.status != 200:
                                logger.error(f"–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {asset_url}, —Å—Ç–∞—Ç—É—Å {resp.status}")
                                continue
                            file_data = await resp.read()
                            await bot.send_document(
                                chat_id=callback.message.chat.id,
                                document=BufferedInputFile(file_data, filename=asset['name']),
                                caption=f"{app.title}: {release['name']}\n{release.get('body', '–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')}"
                            )
                            sent = True
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {asset['name']} –¥–ª—è {app.title} –≤ —á–∞—Ç {callback.message.chat.id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {asset['name']}: {e}")
                        continue
        if not sent:
            await callback.message.edit_text("–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        await callback.message.edit_text(f"{app.title}", reply_markup=get_app_menu(app, is_subscribed, is_admin))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data.startswith("link:"))
async def send_link(callback: CallbackQuery):
    try:
        key = callback.data.split(":", 1)[1]
        app = get_app(key)
        if not app:
            await callback.message.edit_text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        is_subscribed = (
            callback.from_user.id in app.subscribers_users
            if callback.message.chat.type == "private"
            else callback.message.chat.id in app.subscribers_chats
        )
        is_admin = callback.from_user.id == ADMIN_ID
        await callback.message.edit_text(f"{app.title}\n{app.link}", reply_markup=get_app_menu(app, is_subscribed, is_admin))
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è {app.title} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data.startswith("subscribe:"))
async def toggle_subscription(callback: CallbackQuery):
    try:
        key = callback.data.split(":", 1)[1]
        app = get_app(key)
        if not app:
            await callback.message.edit_text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        is_admin = callback.from_user.id == ADMIN_ID
        if callback.message.chat.type == "private":
            if callback.from_user.id in app.subscribers_users:
                app.subscribers_users.remove(callback.from_user.id)
                await callback.message.edit_text(f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {app.title}")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç {app.title}")
            else:
                app.subscribers_users.append(callback.from_user.id)
                await callback.message.edit_text(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {app.title}")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {app.title}")
            save_app(app)
        else:
            chat_member = await callback.message.chat.get_member(callback.from_user.id)
            if chat_member.status not in ["administrator", "creator"]:
                await callback.message.edit_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π.")
                return
            if callback.message.chat.id in app.subscribers_chats:
                app.subscribers_chats.remove(callback.message.chat.id)
                await callback.message.edit_text(f"–ß–∞—Ç –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç {app.title}")
                logger.info(f"–ß–∞—Ç {callback.message.chat.id} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç {app.title}")
            else:
                app.subscribers_chats.append(callback.message.chat.id)
                await callback.message.edit_text(f"–ß–∞—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {app.title}")
                logger.info(f"–ß–∞—Ç {callback.message.chat.id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {app.title}")
            save_app(app)
        is_subscribed = (
            callback.from_user.id in app.subscribers_users
            if callback.message.chat.type == "private"
            else callback.message.chat.id in app.subscribers_chats
        )
        await callback.message.edit_reply_markup(reply_markup=get_app_menu(app, is_subscribed, is_admin))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–æ–π: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data.startswith("setrepo:"))
async def set_repo_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.edit_text("–¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.")
        return
    key = callback.data.split(":", 1)[1]
    app = get_app(key)
    if not app:
        await callback.message.edit_text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (—Ñ–æ—Ä–º–∞—Ç: owner/repo, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'LSPosed/LSPosed'):")
    await state.update_data(key=key)
    await state.set_state(AddAppStates.repo)
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞—á–∞–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è {key}")

@router.callback_query(F.data.startswith("delete:"))
async def delete_app_callback(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.edit_text("–¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        return
    key = callback.data.split(":", 1)[1]
    if get_app(key):
        delete_app(key)
        await callback.message.edit_text(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {key} —É–¥–∞–ª–µ–Ω–æ!")
        apps = get_all_apps()
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(apps))
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} —É–¥–∞–ª–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {key}")
    else:
        await callback.message.edit_text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")